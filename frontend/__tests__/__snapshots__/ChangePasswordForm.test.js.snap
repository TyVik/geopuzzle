// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`shallow <ChangePasswordForm /> components render empty: ChangePasswordForm 1`] = `
<form
  class=""
>
  <div
    class="form-group"
  >
    <label
      class="form-label"
    >
      <span>
        Current password
      </span>
    </label>
    <input
      class="form-control"
      type="password"
      value=""
    />
  </div>
  <div
    class="form-group"
  >
    <label
      class="form-label"
    >
      <span>
        New password
      </span>
    </label>
    <input
      class="form-control"
      type="password"
      value=""
    />
  </div>
  <button
    class="btn btn-primary"
    type="submit"
  >
    <span>
      Change
    </span>
  </button>
</form>
`;

exports[`shallow <ChangePasswordForm /> components render submit fail: ChangePasswordForm 1`] = `
<ChangePasswordForm
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {
        "area": "Area",
        "availableRegions": "Available regions",
        "bugReport": "Something went wrong. Please {0}.",
        "capital": "Capital",
        "changePassword": "Change password",
        "coat_of_arms": "Coat of arms",
        "congratulations": "Congratulations!",
        "currency": "Currency",
        "email": "Email",
        "emailMe": "email me",
        "enTitle": "English title",
        "english": "English",
        "fix_problem": "game is broken",
        "flag": "Flag",
        "found": "Found",
        "give_up": "give up",
        "km2": "sq. km.",
        "language": "Language",
        "loading": "Loading...",
        "loadingError": "Something wrong :(",
        "localization": "Localization",
        "networkError": "Connecting to server...",
        "once_again": "once again",
        "password.change": "Change",
        "password.changed": "Password has been changed",
        "password.current": "Current password",
        "password.new": "New password",
        "phone": "Phone",
        "population": "Population",
        "preview": "Preview",
        "previewWarning": "position and zoom will be saved as default for that game",
        "profile": "Profile",
        "publicProfile": "Public profile",
        "publish": "Publish",
        "publishedToAll": "Allow to any users",
        "publishedToMe": "Allow only you",
        "quizInitCaption": "I\\"ll search the regions by",
        "quizInitCheck": "Choose at least one option",
        "ruTitle": "Russian title",
        "russian": "Russian",
        "save": "Save",
        "search": "Search",
        "selectAtLeastOneRegion": "Select at least one region",
        "socialProfile": "Social accounts",
        "start": "Start",
        "submit": "Submit",
        "subscribe": "News subscription",
        "tags": "Tags",
        "timeOverhead": "more then day",
        "title": "Title",
        "tooManyRegions": "Too many regions",
        "unlink": "unlink",
        "username": "Username",
      },
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
>
  <ReactFinalForm
    onSubmit={[Function]}
    render={[Function]}
  >
    <Form
      inline={false}
      onSubmit={[Function]}
    >
      <form
        className=""
        onSubmit={[Function]}
      >
        <_class
          component={[Function]}
          label={
            <FormattedMessage
              id="password.current"
              values={Object {}}
            />
          }
          name="old_password"
          type="password"
        >
          <Field
            component={[Function]}
            format={[Function]}
            label={
              <FormattedMessage
                id="password.current"
                values={Object {}}
              />
            }
            name="old_password"
            parse={[Function]}
            reactFinalForm={
              Object {
                "batch": [Function],
                "blur": [Function],
                "change": [Function],
                "focus": [Function],
                "getFieldState": [Function],
                "getRegisteredFields": [Function],
                "getState": [Function],
                "initialize": [Function],
                "isValidationPaused": [Function],
                "mutators": Object {},
                "pauseValidation": [Function],
                "registerField": [Function],
                "reset": [Function],
                "resumeValidation": [Function],
                "setConfig": [Function],
                "submit": [Function],
                "subscribe": [Function],
              }
            }
            type="password"
          >
            <Input
              input={
                Object {
                  "name": "old_password",
                  "onBlur": [Function],
                  "onChange": [Function],
                  "onFocus": [Function],
                  "value": "",
                }
              }
              label={
                <FormattedMessage
                  id="password.current"
                  values={Object {}}
                />
              }
              meta={
                Object {
                  "active": false,
                  "data": Object {},
                  "dirty": false,
                  "dirtySinceLastSubmit": false,
                  "error": undefined,
                  "initial": undefined,
                  "invalid": false,
                  "pristine": true,
                  "submitError": undefined,
                  "submitFailed": false,
                  "submitSucceeded": false,
                  "submitting": false,
                  "touched": false,
                  "valid": true,
                  "visited": false,
                }
              }
              type="password"
            >
              <FormGroup>
                <div
                  className="form-group"
                >
                  <FormLabel
                    column={false}
                    srOnly={false}
                  >
                    <label
                      className="form-label"
                    >
                      <FormattedMessage
                        id="password.current"
                        values={Object {}}
                      >
                        <span>
                          Current password
                        </span>
                      </FormattedMessage>
                    </label>
                  </FormLabel>
                  <FormControl
                    onChange={[Function]}
                    type="password"
                    value=""
                  >
                    <input
                      className="form-control"
                      onChange={[Function]}
                      type="password"
                      value=""
                    />
                  </FormControl>
                </div>
              </FormGroup>
            </Input>
          </Field>
        </_class>
        <_class
          component={[Function]}
          label={
            <FormattedMessage
              id="password.new"
              values={Object {}}
            />
          }
          name="new_password1"
          type="password"
        >
          <Field
            component={[Function]}
            format={[Function]}
            label={
              <FormattedMessage
                id="password.new"
                values={Object {}}
              />
            }
            name="new_password1"
            parse={[Function]}
            reactFinalForm={
              Object {
                "batch": [Function],
                "blur": [Function],
                "change": [Function],
                "focus": [Function],
                "getFieldState": [Function],
                "getRegisteredFields": [Function],
                "getState": [Function],
                "initialize": [Function],
                "isValidationPaused": [Function],
                "mutators": Object {},
                "pauseValidation": [Function],
                "registerField": [Function],
                "reset": [Function],
                "resumeValidation": [Function],
                "setConfig": [Function],
                "submit": [Function],
                "subscribe": [Function],
              }
            }
            type="password"
          >
            <Input
              input={
                Object {
                  "name": "new_password1",
                  "onBlur": [Function],
                  "onChange": [Function],
                  "onFocus": [Function],
                  "value": "",
                }
              }
              label={
                <FormattedMessage
                  id="password.new"
                  values={Object {}}
                />
              }
              meta={
                Object {
                  "active": false,
                  "data": Object {},
                  "dirty": false,
                  "dirtySinceLastSubmit": false,
                  "error": undefined,
                  "initial": undefined,
                  "invalid": false,
                  "pristine": true,
                  "submitError": undefined,
                  "submitFailed": false,
                  "submitSucceeded": false,
                  "submitting": false,
                  "touched": false,
                  "valid": true,
                  "visited": false,
                }
              }
              type="password"
            >
              <FormGroup>
                <div
                  className="form-group"
                >
                  <FormLabel
                    column={false}
                    srOnly={false}
                  >
                    <label
                      className="form-label"
                    >
                      <FormattedMessage
                        id="password.new"
                        values={Object {}}
                      >
                        <span>
                          New password
                        </span>
                      </FormattedMessage>
                    </label>
                  </FormLabel>
                  <FormControl
                    onChange={[Function]}
                    type="password"
                    value=""
                  >
                    <input
                      className="form-control"
                      onChange={[Function]}
                      type="password"
                      value=""
                    />
                  </FormControl>
                </div>
              </FormGroup>
            </Input>
          </Field>
        </_class>
        <Button
          active={false}
          disabled={false}
          type="submit"
          variant="primary"
        >
          <button
            className="btn btn-primary"
            disabled={false}
            type="submit"
          >
            <FormattedMessage
              id="password.change"
              values={Object {}}
            >
              <span>
                Change
              </span>
            </FormattedMessage>
          </button>
        </Button>
      </form>
    </Form>
  </ReactFinalForm>
</ChangePasswordForm>
`;
