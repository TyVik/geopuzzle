version: 2
jobs:
  build-backend:
    docker:
    - image: docker:19-git
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.8
      - run: echo "$DOCKER_HUB_PASSWORD" | docker login --username $DOCKER_HUB_LOGIN --password-stdin
      - run:
          name: Build builder
          command: |
            docker build --target backend-builder -t tyvik/geopuzzle:backend-builder -f Dockerfile.backend .
            docker push tyvik/geopuzzle:backend-builder
      - run:
          name: Build image
          command: |
            docker build --build-arg GIT_REVISION=$(git rev-parse --short HEAD) -t tyvik/geopuzzle:backend -f Dockerfile.backend .
            docker image tag tyvik/geopuzzle:backend tyvik/geopuzzle:$CIRCLE_SHA1-backend
            docker push tyvik/geopuzzle:backend
            docker push tyvik/geopuzzle:$CIRCLE_SHA1-backend
      - run:
          name: Build tester
          command: |
            docker build --target backend-tester -t tyvik/geopuzzle:backend-tester -f Dockerfile.backend .
            docker push tyvik/geopuzzle:backend-tester

  build-frontend:
    docker:
    - image: docker:19-git
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.8
      - run: echo "$DOCKER_HUB_PASSWORD" | docker login --username $DOCKER_HUB_LOGIN --password-stdin
      - run:
          name: Rebuild builder
          command: |
            docker build --target frontend-builder -t tyvik/geopuzzle:frontend-builder -f Dockerfile.frontend .
            docker push tyvik/geopuzzle:frontend-builder

  build-bundles:
    docker:
    - image: tyvik/geopuzzle:frontend-builder
      environment:
        NODE_ENV: "production"
        SENTRY_ORG: "geopuzzle"
        SENTRY_PROJECT: "geopuzzle"
    working_directory: ~/repo
    steps:
      - checkout
      - run: mv /app/node_modules /root/repo
      - run: npm run build
      - save_cache:
          key: bundles-{{ .Revision }}
          paths:
            - static/js
      - store_artifacts:
          path: static/js
          destination: bundles

  jest:
    docker:
    - image: tyvik/geopuzzle:frontend-builder
      environment:
        NODE_ENV: "production"
    working_directory: ~/repo
    steps:
      - checkout
      - run: mv /app/node_modules /root/repo
      - run: npm run test
      - save_cache:
          key: coverage-frontend-{{ .Revision }}
          paths:
            - frontend/coverage/lcov.info

  django:
    docker:
      - image: tyvik/geopuzzle:backend-tester
        environment:
          DJANGO_SETTINGS_MODULE: "mercator.settings.circleci"
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: geopuzzle
          DB_USER: geopuzzle
          DB_USER_PASSWORD: geopuzzle
          REDIS_HOST: localhost
      - image: circleci/postgres:12-postgis-ram
        environment:
          POSTGRES_USER: geopuzzle
          POSTGRES_DB: geopuzzle
          POSTGRES_PASSWORD: geopuzzle
      - image: circleci/redis:4.0-alpine
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 30s
      - run:
          name: Prepare environment
          command: mkdir ~/repo/logs
#      - run:
#          name: Run mypy
#          command: PYTHONPATH=${PYTHONPATH}:${PWD} mypy . --show-traceback
      - run:
          name: Run tests
          command: coverage run --source='.' manage.py test
      - run:
          name: Collect coverage
          command: |
            coverage report
            coverage xml
      - save_cache:
          key: coverage-backend-{{ .Revision }}
          paths:
            - coverage.xml

  pylint:
    docker:
      - image: tyvik/geopuzzle:backend-tester
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Run pylint
          command: pylint *//*.py

  coverage:
    docker:
      - image: tyvik/geopuzzle:backend-tester
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - coverage-frontend-{{ .Revision }}
      - restore_cache:
          keys:
            - coverage-backend-{{ .Revision }}
      - run: coveralls
      - run: codecov

  sonarqube:
    docker:
    - image: dmoscrop/circleci-sonar-scanner-docker
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - coverage-frontend-{{ .Revision }}
      - restore_cache:
          keys:
            - coverage-backend-{{ .Revision }}
      - run: .circleci/sonarqube.sh

  deploy:
    docker:
      - image: tyvik/geopuzzle:backend
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - bundles-{{ .Revision }}
      - add_ssh_keys:
          fngerprints:
           - "c7:1f:fb:eb:c0:79:6b:c9:f7:71:62:d6:f5:c0:d5:e7"
      - run:
          name: Upload static
          command: |
            python manage.py collectstatic --noinput
            python manage.py deploystatic
      - run:
          name: Update server
          command: ssh -o "StrictHostKeyChecking no" $SSH_USER@$SSH_HOST "cd /home/tyvik/geopuzzle/ && .circleci/update.sh"

workflows:
  version: 2
  main:
    jobs:
      - build-frontend
      - build-backend
      - build-bundles:
          requires:
            - build-frontend
      - django:
          requires:
            - build-backend
      - pylint:
          requires:
            - build-backend
      - jest:
          requires:
            - build-frontend
      - sonarqube:
          requires:
            - django
            - jest
          filters:
            branches:
              ignore: master
      - coverage:
          requires:
            - django
            - jest
          filters:
            branches:
              ignore: master
      - deploy:
          requires:
            - django
            - jest
          filters:
            branches:
              only: master
